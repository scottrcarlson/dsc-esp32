
//Operational Modes
#define MODE_PROMISCUOUS  	0
#define MODE_COMMAND  		1
#define MODE_KISS_TNC  		2

int op_mode = MODE_COMMAND; // TODO, should come from flash config

// Timezone Constants
#define TZ              1               // (utc+) TZ in hours
#define DST_MN          60              // use 60mn for summer time in some countries
#define TZ_MN           ((TZ)*60)
#define TZ_SEC          ((TZ)*3600)
#define DST_SEC         ((DST_MN)*60)

// ON_BOARD TTGO TBEAM Hardware
#define BLUE_LED  14 // LED (TTGO TBEAM)
#define USER_BTN  39 // User Defined Button (TTGO TBEAM)

//** JANKY VERSION TRACKING
const int janky_version = 33;

// LoRa globals --------------------------------------------------
#define RST     14   // GPIO14 -- SX1278's RESET
#define DI0     26   // GPIO26 -- SX1278's IRQ(Interrupt Request)
#define LORA_BAND  915.05E6

//OLED Globals
#define OLED_RESET    -1      // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_WIDTH 128      // OLED display width, in pixels
#define SCREEN_HEIGHT 64      // OLED display height, in pixels
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
const int OLED_UPDATE_INTERVAL_MS = 500;
int lastOLEDUpdateTime = 0;
float oled_x_scale = 128.0 / 100.0;
uint16_t logoW=128;
uint16_t logoH=64;
static const unsigned char PROGMEM logo[] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xeb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x41, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe8, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xa0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0x40, 0x00, 0x7f, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xcf, 0xfe, 0x80, 0x00, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xcf, 0xfe, 0x80, 0x00, 0xbf, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0x80, 0x01, 0x7f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xc5, 0xff, 0x40, 0x02, 0xff, 0xfb, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x40, 0x07, 0xff, 0xf0, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x20, 0x05, 0xff, 0xe0, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf5, 0xff, 0xe0, 0x0b, 0xff, 0xef, 0xff, 0x93, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xd0, 0x17, 0xff, 0xcf, 0xff, 0x9b, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xf0, 0x2f, 0xff, 0x9f, 0xff, 0x9b, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xe8, 0x5f, 0xff, 0xbf, 0xff, 0x9b, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xf8, 0x5f, 0xff, 0x3f, 0xff, 0x98, 0x0f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xf4, 0xbf, 0xfe, 0x7f, 0xff, 0x98, 0x0f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xfb, 0xff, 0xfc, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xfc, 0xff, 0xf9, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xfe, 0x3f, 0xfb, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xe1, 0xf3, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xfe, 0x07, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xfe, 0x05, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xfc, 0x05, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xfc, 0x04, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xe8, 0x04, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xe8, 0x0c, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xc8, 0x08, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xc8, 0x10, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xec, 0x20, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xe4, 0x61, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xf2, 0x43, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0x5f, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xef, 0xfd, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xc0, 0xe0, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xe6, 0x03, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0x93, 0xe0, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};



char escape_str[7] = "~~~+++";


// GPS globals --------------------------------------------------
TinyGPSPlus gps;                            
HardwareSerial GPSSerial1(1);    
const int GPS_BAUDRATE = 9600;
const int GPS_SERIAL_TX_PIN = 12;
const int GPS_SERIAL_RX_PIN = 15;

// Battery voltage ADC globals ----------------------------------
const byte ADCBOARDVOLTAGE_PIN = 35; // Prefer Use of ADC1 (8 channels, attached to GPIOs 32 - 39) . ADC2 (10 channels, attached to GPIOs 0, 2, 4, 12 - 15 and 25 - 27)
const byte ADC_BITS = 10; // 10 - 12 bits
int BATT_ADC_VAL_TO_PCT_REMAIN[50];

// Message queue globals ----------------------------------------
Queue<Msg> sentMsgs(30);     // assume we'll never have >N sent msgs that haven't been logged to flash
Queue<Msg> outboundMsgs(30); // assume we'll never have >N composed-here or to-repeat msgs that haven't been transmitted
Queue<Msg> receivedMsgs(30); // assume we'll never have >N received msgs that haven't been logged to flash 



/*************
*   GLOBALS
*************/
bool debug_mode = false;

const int SERIAL_BAUDRATE = 115200;
int nodeNum = -1;
unsigned int sentPktCounter = 0;
const int TIME_REQD_TO_SEND_LARGEST_PKT_SEC = 2; // TODO: measure w/ waterfall
bool firstGpsFix = true;
bool sentOnePktDuringOurSlot = false;
//const int LED_IO14_PIN_NUMBER = 2;
String usbSerialCommand = "";
const char MSG_LOG_FILENAME[] = "/msgLog.txt";
const char BATT_LOG_FILENAME[] = "/battLog.txt";
int lastFlashWriteTime = 0;
const int FLASH_WRITE_INTERVAL_MS = 5 * 60 * 1000;

bool isBlueLED = false;
int lastLEDUpdateTime = 0;
int lastLEDFlashTime = 40;

CircularBuffer<char, 5000> serial_queue;
const int outboundSerialMax = 140;
char outboundSerial[outboundSerialMax]; // Outbound Message chunk

const int outboundTransparentMax = 255;
char outboundTransparentSerial[outboundTransparentMax]; // Outbound Message chunk

String outgoing;              // outgoing message
String incoming = "";         // incoming message
CircularBuffer<char, 6> transparentEscape;

bool option_radio_tdma = false;
bool option_radio_csma = false;

long lastSendTime = 0;                // last send time
int TRANSMIT_INTERVAL_MS = 250;       // interval between sends
int cntSent = 0;
int cntRecv = 0;
float kbSent = 0.0;           // Total kb sent
float kbRecv = 0.0;           // Total kb recv

bool carrier_detect = false; //Carrier detect FLAG (crude)
int lastCarrierTime;
int carrier_timeout = 0;  // Carrier FLAG RESET timeout ms (randomly generated)

int quality_time = -1;
bool gps_valid = false;
int last_gps_second = 0;

bool transmit_loop = true;
int lastTransmitLoop = 0;
const int TESTING_TRANSMIT_LOOP_INTERVAL_MS = 10000;

int activeNodes = 0;  // Track nodes in range
int nodeLastEpoch[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
int timeNodeOutOfRange = 60000;

int lastCheckActiveTime = 0;
int checkActiveTime = 2000;

int loopPeriod = 0;    // Track loop period
int loopPeriodMax = 0; // Capture Max loop period
int lastLoopTime = 0;

float symbolRate = 1.75 * (pow(2,7) / 125000.0) * 1000.0;   // symbol rate in sec = 2^SF / BW


